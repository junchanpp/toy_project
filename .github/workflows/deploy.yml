name: BackEnd - CI/CD

on:
  push:
    tags:
      - 'deploy-.+-?([0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9])?'

permissions:
  contents: read

jobs:
  build:
    # build를 진행할 운영체제를 선택합니다.
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3
      # JDK를 11 버전으로 셋팅합니다.
      - name: setup jdk 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 빌드 실행
        run: ./gradlew bootjar


      # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
      - name: zip file 생성
        run: |
          mkdir deploy
          cp ./docker-compose.blue.yml ./deploy/
          cp ./docker-compose.green.yml ./deploy/
          cp ./appspec.yml ./deploy/
          cp ./Dockerfile ./deploy/
          cp ./scripts/*.sh ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy
      

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # S3에 프로젝트를 업로드 합니다.
      - name: S3에 프로젝트 업로드
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          ./spring-build.zip s3://toy-project-bucket

      # CodeDelploy에 배포를 요청합니다.
      - name: Code Deploy 배포 요청
        run: aws deploy create-deployment --application-name toy-project-code-deploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name toy-project-code-deploy-group
          --s3-location bucket=toy-project-bucket,bundleType=zip,key=spring-build.zip


  check-deployment-status:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Check CodeDeploy Deployment Status
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments --region ap-northeast-2 --application-name toy-project-code-deploy --deployment-group-name toy-project-code-deploy-group --query "deployments[0]" --output text)
          aws deploy wait deployment-successful --debug true --deployment-id $DEPLOYMENT_ID

      - name: Get Deployment Details
        run: |
          DEPLOYMENT_ID=$(aws deploy list-deployments --region ap-northeast-2 --application-name toy-project-code-deploy --deployment-group-name toy-project-code-deploy-group --query "deployments[0]" --output text)
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query "deploymentInfo.[status, creator]" --output text
